---
import CopyIcon from "@/assets/icons/Copy.astro";
import CopyXIcon from "@/assets/icons/CopyX.astro";
import CheckIcon from "@/assets/icons/Check.astro";
---

<section class="flex flex-col md:flex-row mt-8 md:mt-24">
  <div class="w-full md:w-1/2 p-4" id="divOriginal">
    <label
      for="textOriginal"
      class="block mb-2 text-lg font-medium text-gray-900 dark:text-white"
      >ðŸ“„ Text Original</label
    >
    <textarea
      id="textOriginal"
      name="textOriginal"
      rows="15"
      class="block
      p-2.5
      text-sm
      text-gray-900
      bg-gray-50
      rounded-lg
      border
      border-gray-300
      focus:ring-blue-500
      focus:border-blue-500
      focus:outline-none
      dark:bg-gray-800
      dark:border-gray-700
      dark:placeholder-gray-500
      dark:dark:text-slate-300
      dark:focus:ring-blue-500
      dark:focus:border-blue-500
      w-full"
      placeholder="Copy your markdown text..."></textarea>
  </div>

  <div class="relative w-full md:w-1/2 p-4" id="divConvert">
    <label
      for="textConvert"
      class="block mb-2 text-lg font-medium text-gray-900 dark:text-white"
      >ðŸ“‘ Text Convert</label
    >
    <textarea
      id="textConvert"
      name="textConvert"
      rows="15"
      class="block
      p-2.5
      text-sm
      text-gray-900
      bg-gray-50
      rounded-lg
      border
      border-gray-300
      focus:ring-blue-500
      focus:border-blue-500
      focus:outline-none
      dark:bg-gray-800
      dark:border-gray-700
      dark:placeholder-gray-500
      dark:text-slate-300
      dark:focus:ring-blue-500
      dark:focus:border-blue-500
      w-full"
    ></textarea>

    <!-- BotÃ³n en la esquina superior derecha -->
    <button
      id="btnCopy"
      aria-label="click to copy result"
      class="absolute
      top-9
      right-0
      mt-16
      mr-10
      md:top-0
      p-2
      rounded-md
      text-base
      bg-gray-50
      hover:bg-gray-200
      dark:bg-gray-800
      text-gray-500
      dark:text-slate-300
      dark:hover:bg-gray-600"
      type="button"
    >
      <span id="iconCopy" class="transition-all duration-500"
        ><CopyIcon class="size-5" /></span
      >
      <span id="iconCheck" class="hidden transition-all duration-500"
        ><CheckIcon class="size-5" /></span
      >
      <span id="iconCopyX" class="hidden transition-all duration-500"
        ><CopyXIcon class="size-5" /></span
      >
    </button>
  </div>
</section>

<style>
  .text-sm::placeholder {
    font-size: 1.25rem;
    line-height: 1.25rem;
  }

  @media (max-width: 767px) {
    #divConvert::before {
      content: ">";
      color: #3b82f6;
      font-size: 2.5rem;
      position: relative;
      left: 50%;
      display: inline-block;
      transform: rotate(90deg);
    }
  }

  @media (min-width: 768px) {
    #divOriginal::after {
      content: ">";
      color: #3b82f6;
      font-size: 2.5rem;
      position: relative;
      left: 100.5%;
      bottom: 49%;
      transform: none;
    }
  }
</style>

<script>
  const textOriginal = document.getElementById(
    "textOriginal",
  ) as HTMLTextAreaElement;
  const textConvert = document.getElementById(
    "textConvert",
  ) as HTMLTextAreaElement;
  const btnCopy = document.getElementById("btnCopy") as HTMLButtonElement;

  let iconCopy = document.getElementById("iconCopy") as HTMLSpanElement;
  let iconCheck = document.getElementById("iconCheck") as HTMLSpanElement;
  let iconCopyX = document.getElementById("iconCopyX") as HTMLSpanElement;

  textOriginal.addEventListener("input", () => {
    let lines: string[] | any = [];
    let count = 1;
    let currentLevel = 0;
    let currentSubLevel = 1;
    let outputLines: string[] = [];
    textConvert.value = "";

    lines = textOriginal.value.split("\n");

    if (lines.length > 1) {
      textConvert.value = "";
      for (let line of lines) {
        line = line.trim();

        if (!line.startsWith("#")) {
          continue;
        }

        currentLevel = line.split("#").length - 1;

        if (currentLevel > 6 || currentLevel === 1) continue;

        if (line.endsWith(".")) {
          line = line.replace(".", "");
        }

        line = line.replace(/#/g, "").trim();

        line = `[${line}.](#${line
          .toLowerCase()
          .trim()
          .replace(/ /g, "-")
          .trim()})`;

        if (currentLevel === 2) {
          // Header ##
          line = `${count}. ${line}`;
          count++;
          currentSubLevel = 1;
        } else if (currentLevel === 3) {
          // Header ###
          line = `${"\t".repeat(1)}${currentSubLevel}. ${line}`;
          currentSubLevel++;
        } else if (currentLevel === 4) {
          // Header ####
          line = `${"\t".repeat(2)}${"- "} ${line}`;
        } else if (currentLevel === 5) {
          // Header #####
          line = `${"\t".repeat(3)}${"- "} ${line}`;
        } else {
          // Header ######
          line = `${"\t".repeat(4)}${"- "} ${line}`;
        }

        outputLines.push(line);
      }

      textConvert.value = outputLines.join("\n");
    }
  });

  btnCopy.addEventListener("click", () => {
    if (textConvert.value.length > 1) {
      try {
        textConvert.select();
        document.execCommand("Copy");
        textConvert.blur();

        iconCopy.classList.toggle("hidden");
        iconCheck.classList.toggle("hidden");

        setTimeout(() => {
          iconCopy.classList.toggle("hidden");
          iconCheck.classList.toggle("hidden");
        }, 500);
      } catch (error) {
        iconCopy.classList.toggle("hidden");
        iconCopyX.classList.toggle("hidden");
        setTimeout(() => {
          iconCopy.classList.toggle("hidden");
          iconCopyX.classList.toggle("hidden");
        }, 500);
      }
    } else {
      iconCopy.classList.toggle("hidden");
      iconCopyX.classList.toggle("hidden");
      setTimeout(() => {
        iconCopy.classList.toggle("hidden");
        iconCopyX.classList.toggle("hidden");
      }, 500);
    }
  });
</script>
